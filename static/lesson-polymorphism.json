{"code":"public class Example {\n    public static void main(String... args) {\n        <c-frm f-id=\"a\">String</c-frm> myString = <c-frm f-id=\"a\">&quot;string a&quot;</c-frm>;\n        <c-frm f-id=\"b\">Object</c-frm> strAsObj = <c-frm f-id=\"c\">&quot;string b&quot;</c-frm>;\n        <c-frm f-id=\"d\">String</c-frm> otherString = <c-frm f-id=\"e\">(String) </c-frm><c-frm f-id=\"d\">strAsObj</c-frm>;\n    }\n}\n","steps":[{"index":"1","cmds":{"hide":["e"]},"html":"<h2>Inheritance at compile time in Java</h2>\n\n<p>In order for your Java code to compile, it has to pass the compiler&#39;s type checks. First, let&#39;s look at how this is checked when a variable is assigned via the <code class=\"prettyprint\">=</code> operator.</p>\n"},{"index":"2","cmds":{"spotlight":["a"]},"html":"<p>Keeping in mind the types given, will this statement compile?</p>\n"},{"index":"3","cmds":{"pass":["a"]},"html":"<p>Whenever something in Java is assigned to a variable, the variable&#39;s type must match the thing it is being assigned to.</p>\n\n<p>This statement is valid, because the type <code class=\"prettyprint\">String</code> given to the variable matches the type <code class=\"prettyprint\">String</code> given to the string literal.</p>\n"},{"index":"4a","cmds":{"spotlight":["b","c"]},"html":"<p>What about this line? <code class=\"prettyprint\">Object</code> isn&#39;t the same as <code class=\"prettyprint\">String</code>. How does the compiler handle this?</p>\n"},{"index":"4b","cmds":{"pass":["b","c"]},"html":"<p>The compiler has no issue with this, because <code class=\"prettyprint\">String</code> inherits from <code class=\"prettyprint\">Object</code>. In other words, a <code class=\"prettyprint\">String</code> is an <code class=\"prettyprint\">Object</code>, and so the statement is valid.</p>\n"},{"index":"4c","cmds":{"spotlight":["b","d"]},"html":"<p>How will the compiler process this line, keeping in mind that <code class=\"prettyprint\">strAsObj</code> is defined as <code class=\"prettyprint\">&quot;string b&quot;</code>?</p>\n"},{"index":"5","cmds":{"fail":["b","d"]},"html":"<p>This line fails! The compiler doesn&#39;t care that <code class=\"prettyprint\">strAsObj</code> has a value of <code class=\"prettyprint\">&quot;string b&quot;</code>.</p>\n\n<p>We gave <code class=\"prettyprint\">strAsObj</code> the static type <code class=\"prettyprint\">Object</code>, and when checking types at compile time <strong>only the static types are considered</strong>. So the compiler compares <code class=\"prettyprint\">String</code> to <code class=\"prettyprint\">Object</code>, and finds that <code class=\"prettyprint\">Object</code> does not inherit from <code class=\"prettyprint\">String</code>.</p>\n"}]}